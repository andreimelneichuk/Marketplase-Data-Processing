

services:
  postgres:
    image: postgres:13
    environment:
      POSTGRES_USER: ${DATABASE_USER}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
      POSTGRES_DB: ${DATABASE_NAME}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./schema.sql:/docker-entrypoint-initdb.d/schema.sql
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M  

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.10.0
    environment:
      - discovery.type=single-node
    ports:
      - "${ELASTICSEARCH_PORT}:${ELASTICSEARCH_PORT}"
    volumes:
      - es_data:/usr/share/elasticsearch/data
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 3G
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://${ELASTICSEARCH_HOST}:${ELASTICSEARCH_PORT}/ || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5

  app:
    build: .
    volumes:
      - .:/app
      - ./offers.xml:/app/offers.xml
    env_file:
      - .env
    command: >
      sh -c "while ! nc -z ${DATABASE_HOST} ${DATABASE_PORT}; do
              echo 'Waiting for PostgreSQL...';
              sleep 3;
           done;
           python main.py"
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1G

  elasticsearch-mapping:
    image: alpine:3.8
    depends_on:
      elasticsearch:
        condition: service_healthy
    volumes:
      - ./mapping.json:/app/mapping.json
    entrypoint: >
      sh -c "apk add --no-cache curl && \
            while ! nc -z elasticsearch 9200; do
            echo 'Waiting for Elasticsearch...';
            sleep 3;
          done;
          echo 'Elasticsearch is available. Applying index mapping...';
          curl -X DELETE 'http://elasticsearch:9200/products';
          curl -X PUT 'http://elasticsearch:9200/products/_mapping' \
              -H 'Content-Type: application/json' \
              -d @/app/mapping.json"

volumes:
  postgres_data:
  es_data:
  